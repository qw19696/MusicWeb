package com.zf.musicweb.controller;import com.alibaba.fastjson.JSONObject;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import com.zf.musicweb.entity.Song;import com.zf.musicweb.service.SongService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.system.ApplicationHome;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import java.io.File;import java.io.IOException;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;/** * <p> *  前端控制器 * </p> * * @author ${author} * @since 2022-01-05 */@RestControllerpublic class SongController {    @Resource    private SongService songService;    @Autowired    private RedisTemplate redisTemplate;    //返回所有歌曲    @GetMapping("/song")    public Object allSong(){        //先从redis查询一次数据，不存在再从mysql查数据        if(redisTemplate.hasKey("songList")){            List<Song> songx=redisTemplate.opsForList().range("songList",0,-1);            return songx;        }else {            List<Song> songs=songService.list();            redisTemplate.opsForList().rightPushAll("songList",songs);            return songs;        }    }    //根据歌手ID返回歌曲    @GetMapping("/song/singer/detail")    public Object songOfSingerId(HttpServletRequest req){        String id=req.getParameter("singerId");        Map<String,Object> ids=new HashMap<>();        ids.put("singer_id",id);        return songService.listByMap(ids);    }    //根据歌曲ID返回歌曲    @GetMapping("/song/detail")    public Object songOfId(HttpServletRequest req){        String id = req.getParameter("id");        Map<String,Object> ids=new HashMap<>();        ids.put("id",id);        return songService.listByMap(ids);    }    //根据歌手名返回歌曲    @GetMapping("/song/singerName/detail")    public Object songOfSingerName(HttpServletRequest req){        String name = req.getParameter("name");        QueryWrapper<Song> names=new QueryWrapper<>();        names.like("name",name);        List<Song> list=songService.list(names);        return list;    }    //根据歌曲名返回歌曲    @GetMapping("/song/name/detail")    public Object songOfName(HttpServletRequest req){        String name = req.getParameter("name");        Map<String,Object> ids=new HashMap<>();        ids.put("name",name);        return songService.listByMap(ids);    }    //删除歌曲    @GetMapping("/song/delete")    public Object deleteSong(HttpServletRequest req){        String id=req.getParameter("id");        redisTemplate.delete("songList");        return songService.removeById(id);    }    //添加歌曲    @PostMapping("/song/add")    public Object addSong(HttpServletRequest req, @RequestParam("file")MultipartFile mpfile){        JSONObject jsonObject=new JSONObject();        String singer_id = req.getParameter("singerId").trim();        String name = req.getParameter("name").trim();        String introduction = req.getParameter("introduction").trim();        String pic = "/img/songPic/tubiao.jpg";        String lyric = req.getParameter("lyric").trim();        if(mpfile.isEmpty()){            jsonObject.put("code", 0);            jsonObject.put("msg", "音乐上传失败！");            return jsonObject;        }        ApplicationHome h=new ApplicationHome();        String fileName= mpfile.getOriginalFilename();        String filePath =h.getDir()+"/song";        File file1=new File(filePath);        if(!file1.exists()){            file1.mkdir();        }        //定义上传的音乐保存的地址和名字(原名字)        File dest=new File(filePath+System.getProperty("file.separator") + fileName);        //定义返还给前端和数据库的 文件地址        String storeUrlPath="/song/"+fileName;        try{            mpfile.transferTo(dest);            Song song=new Song();            song.setSingerId(Integer.parseInt(singer_id));            song.setName(name);            song.setIntroduction(introduction);            song.setPic(pic);            song.setLyric(lyric);            song.setCreateTime(new Date());            song.setUpdateTime(new Date());            song.setUrl(storeUrlPath);            boolean res=songService.save(song);            if (res) {                jsonObject.put("code", 1);                jsonObject.put("avator", storeUrlPath);                redisTemplate.delete("songList");                jsonObject.put("msg", "上传成功");            } else {                jsonObject.put("code", 0);                jsonObject.put("msg", "上传失败");            }            return jsonObject;        } catch (IOException e) {            jsonObject.put("code", 0);            jsonObject.put("msg", "上传失败" + e.getMessage());            return jsonObject;        }    }    //更新歌曲信息    @PostMapping("song/update")    public Object updateSongMsg(HttpServletRequest req){        JSONObject jsonObject = new JSONObject();        String id = req.getParameter("id").trim();        String singer_id = req.getParameter("singerId").trim();        String name = req.getParameter("name").trim();        String introduction = req.getParameter("introduction").trim();        String lyric = req.getParameter("lyric").trim();        Song song=new Song();        song.setId(Integer.parseInt(id));        song.setSingerId(Integer.parseInt(singer_id));        song.setName(name);        song.setIntroduction(introduction);        song.setLyric(lyric);        boolean res=songService.updateById(song);        if (res){            jsonObject.put("code", 1);            jsonObject.put("msg", "修改成功");            redisTemplate.delete("songList");        }else {            jsonObject.put("code", 0);            jsonObject.put("msg", "修改失败");        }        return jsonObject;    }    //更新歌曲图片    @PostMapping("/song/img/update")    public Object updateSongPic(@RequestParam("file")MultipartFile urlFile,@RequestParam("id")int id){        JSONObject jsonObject=new JSONObject();        if(urlFile.isEmpty()){            jsonObject.put("code",0);            jsonObject.put("msg","音乐上传失败!");            return jsonObject;        }        //删除本地旧头像        QueryWrapper<Song> oldOne=new QueryWrapper<>();        oldOne.select("pic").eq("id",id);        Song song2=songService.getOne(oldOne);        String deleteFilePath=System.getProperty("user.dir")+song2.getPic();        File deleteFile=new File(deleteFilePath);        if(deleteFile.exists()){            deleteFile.delete();        }        ApplicationHome h =new ApplicationHome();        String fileName=System.currentTimeMillis()+urlFile.getOriginalFilename();        String filePath=System.getProperty("user.dir")+"/img"+"/songPic";        String storeUrlPath="/img/songPic/"+fileName;        File file1=new File(filePath);        if(!file1.exists()){            file1.mkdir();        }        File dest=new File(filePath + System.getProperty("file.separator")+fileName);        Song song=new Song();        song.setId(id);        song.setPic(storeUrlPath);        try {            urlFile.transferTo(dest);            boolean res=songService.updateById(song);            if (res){                jsonObject.put("code", 1);                jsonObject.put("avator", storeUrlPath);                jsonObject.put("msg", "上传成功");                redisTemplate.delete("songList");            }else {                jsonObject.put("code", 0);                jsonObject.put("msg", "上传失败");            }            return jsonObject;        } catch (IOException e) {            jsonObject.put("code", 0);            jsonObject.put("msg", "上传失败" + e.getMessage());            return jsonObject;        }finally {            return jsonObject;        }    }    //更新歌曲URL    @PostMapping("/song/url/update")    public Object songUrlUpdate(@RequestParam("file")MultipartFile urlFile,@RequestParam("id")int id){        JSONObject jsonObject=new JSONObject();        if(urlFile.isEmpty()){            jsonObject.put("code", 0);            jsonObject.put("msg", "音乐上传失败！");            return jsonObject;        }        //删除本地旧歌        QueryWrapper<Song> oldOne=new QueryWrapper<>();        oldOne.select("url").eq("id",id);        Song deleteSong=songService.getOne(oldOne);        String deleteFilePath=System.getProperty("user.dir")+deleteSong.getUrl();        File deleteFile=new File(deleteFilePath);        if(deleteFile.exists()){            deleteFile.delete();        }        ApplicationHome h =new ApplicationHome();        String fileName = urlFile.getOriginalFilename();        String filePath = System.getProperty("user.dir")+"/song";        File dest = new File(filePath + System.getProperty("file.separator") + fileName);        String storeUrlPath = "/song/"+fileName;        File file1=new File(filePath);        if (!file1.exists()){            file1.mkdir();        }        Song song=new Song();        song.setId(id);        song.setUrl(storeUrlPath);        try {            urlFile.transferTo(dest);            boolean res=songService.updateById(song);            if (res){                jsonObject.put("code", 1);                jsonObject.put("avator", storeUrlPath);                jsonObject.put("msg", "上传成功");                redisTemplate.delete("songList");            }else {                jsonObject.put("code", 0);                jsonObject.put("msg", "上传失败");            }            return jsonObject;        } catch (IOException e) {            jsonObject.put("code", 0);            jsonObject.put("msg", "上传失败" + e.getMessage());            return jsonObject;        }finally {            return jsonObject;        }    }}