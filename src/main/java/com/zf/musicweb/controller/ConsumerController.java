package com.zf.musicweb.controller;import com.alibaba.fastjson.JSONObject;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import com.zf.musicweb.entity.Consumer;import com.zf.musicweb.service.ConsumerService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpSession;import java.io.File;import java.io.FileNotFoundException;import java.io.IOException;import java.text.DateFormat;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;@RestControllerpublic class ConsumerController {    @Autowired    private ConsumerService consumerService;    //添加新用户    @PostMapping("/user/add")    public Object addUser(@RequestBody Consumer consumer){        JSONObject jsonObject = new JSONObject();//        String username=req.getParameter("username").trim();//        String password=req.getParameter("password").trim();//        String sex = req.getParameter("sex").trim();//        String phone_num = req.getParameter("phone_num").trim();//        String email = req.getParameter("email").trim();//        String birth = req.getParameter("birth").trim();//        String introduction = req.getParameter("introduction").trim();//        String location = req.getParameter("location").trim();//        String avator = req.getParameter("avator").trim();        if(consumer.getUsername().equals("") || consumer.getUsername() == null){            jsonObject.put("code",0);            jsonObject.put("code","用户名或密码错误");            return jsonObject;        }//        Consumer consumer=new Consumer();//        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");//        Date myBirth= new Date();//        try {//            myBirth=dateFormat.parse(consumer.getBirth().toString());//        } catch (ParseException e) {//            e.printStackTrace();//        }        if (consumer.getPhoneNum() == ""){            consumer.setPhoneNum(null);        }else {            consumer.setPhoneNum(consumer.getPhoneNum());        }        if (consumer.getEmail() ==""){            consumer.setEmail(null);        }else {            consumer.setEmail(consumer.getEmail());        }        consumer.setCreateTime(new Date());        consumer.setUpdateTime(new Date());        boolean res = consumerService.addUser(consumer);        if (res) {            jsonObject.put("code", 1);            jsonObject.put("msg", "注册成功");            return jsonObject;        } else {            jsonObject.put("code", 0);            jsonObject.put("msg", "注册失败");            return jsonObject;        }    }    //判断是否登录成功    @PostMapping("/user/login/status")    public Object loginStatus(HttpServletRequest req, HttpSession session){        JSONObject jsonObject = new JSONObject();        String username = req.getParameter("username");        String password = req.getParameter("password");        boolean res = consumerService.veritypasswd(username,password);        if (res){            jsonObject.put("code",1);            jsonObject.put("msg","登陆成功");            jsonObject.put("token", username);            jsonObject.put("userMsg",consumerService.loginStatus(username));//            session.setAttribute("username",username);            return jsonObject;        }else {            jsonObject.put("code",0);            jsonObject.put("msg","用户名或密码错误");            return jsonObject;        }    }    //返回所有用户    @GetMapping("/user")    public Object allUser(){        return consumerService.list();    }    //返回指定ID的用户    @GetMapping("/user/detail")    public Object userOfId(HttpServletRequest req){        String id=req.getParameter("id");        List<Consumer> users=new ArrayList<>();        users.add(consumerService.getById(id));        return users;    }    //删除用户    @GetMapping("/user/delete")    public Object deleteUser(HttpServletRequest req){        String id=req.getParameter("id");        return consumerService.removeById(id);    }    //更新用户信息    @PostMapping("/user/update")    public Object updateUserMsg(HttpServletRequest req){        JSONObject jsonObject = new JSONObject();        String id = req.getParameter("id").trim();        String username = req.getParameter("username").trim();        String password = req.getParameter("password").trim();        String sex = req.getParameter("sex").trim();        String phone_num = req.getParameter("phone_num").trim();        String email = req.getParameter("email").trim();        String birth = req.getParameter("birth").trim();        String introduction = req.getParameter("introduction").trim();        String location = req.getParameter("location").trim();        if(username.equals("") || username == null){            jsonObject.put("code",0);            jsonObject.put("msg","用户名或密码错误");            return jsonObject;        }        Consumer consumer=new Consumer();        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");        Date myBirth = new Date();        try {            myBirth = dateFormat.parse(birth);        }catch (Exception e){            e.printStackTrace();        }        consumer.setId(Integer.parseInt(id));        consumer.setUsername(username);        consumer.setPassword(password);        consumer.setSex(new Byte(sex));        consumer.setPhoneNum(phone_num);        consumer.setEmail(email);        consumer.setBirth(myBirth);        consumer.setIntroduction(introduction);        consumer.setLocation(location);        consumer.setUpdateTime(new Date());        boolean res= consumerService.updateUserMsg(consumer);        if(res){            jsonObject.put("code",1);            jsonObject.put("msg","修改成功");            return jsonObject;        }else {            jsonObject.put("code",0);            jsonObject.put("msg","修改失败");            return jsonObject;        }    }    //头像上传    @PostMapping("/user/avatar/update")    public Object updateUserPic(@RequestParam("file")MultipartFile avatorFile,@RequestParam("id")int id) throws FileNotFoundException {        JSONObject jsonObject= new JSONObject();        if(avatorFile.isEmpty()){            jsonObject.put("code",0);            jsonObject.put("msg","文件上传失败！");            return jsonObject;        }        //删除本地旧头像        QueryWrapper<Consumer> oldOne=new QueryWrapper<>();        oldOne.select("avator").eq("id",id);        Consumer consumer2=consumerService.getOne(oldOne);        String deleteFilePath=System.getProperty("user.dir")+consumer2.getAvator();        File deleteFile=new File(deleteFilePath);        if(deleteFile.exists()){            deleteFile.delete();        }        //定义上传文件名字为 时间+文件原名        String fileName=System.currentTimeMillis()+avatorFile.getOriginalFilename();        //获取JAR包同级目录        //定义上传文件路径为 项目路径/img/avatorImages        String filePath = System.getProperty("user.dir")+"/"+ "img" +"/"+ "avatorImages" ;        File file1=new File(filePath);        //检查是否存在filePath文件夹，若不存在则创建一个        if(!file1.exists()){            file1.mkdir();        }        //目的地路径和生成文件名 项目路径/img/avatorImages+fileName        File dest=new File(filePath + System.getProperty("file.separator") + fileName);        //定义返回数据库的用户头像地址        String storeAvatorPath="/img/avatorImages/"+fileName;        try{            avatorFile.transferTo(dest);            Consumer consumer=new Consumer();            consumer.setId(id);            consumer.setAvator(storeAvatorPath);            boolean res=consumerService.updateUserAvator(consumer);            if(res){                jsonObject.put("code",1);                jsonObject.put("avator", storeAvatorPath);                jsonObject.put("msg","上传成功");                return jsonObject;            }else {                jsonObject.put("code",0);                jsonObject.put("msg","上传失败");                return jsonObject;            }        } catch (IOException e) {            jsonObject.put("code",0);            jsonObject.put("msg","上传失败"+e.getMessage());            return jsonObject;        }finally {            return jsonObject;        }    }}