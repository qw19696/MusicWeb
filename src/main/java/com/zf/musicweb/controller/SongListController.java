package com.zf.musicweb.controller;import com.alibaba.fastjson.JSONObject;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import com.zf.musicweb.entity.Consumer;import com.zf.musicweb.entity.SongList;import com.zf.musicweb.service.SongListService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.system.ApplicationHome;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import java.io.File;import java.io.IOException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;/** * <p> *  前端控制器 * </p> * * @author ${author} * @since 2022-01-05 */@RestControllerpublic class SongListController {    @Autowired    private SongListService songListService;    @Autowired    private RedisTemplate redisTemplate;    //返回所有歌单    @GetMapping("/songList")    public Object allSongList(){        if(redisTemplate.hasKey("songL")){            return redisTemplate.opsForList().range("songL",0,-1);        }else {            List songlist=songListService.list();            redisTemplate.opsForList().rightPushAll("songL",songlist);            return songlist;        }    }    //返回包含搜索文字的歌单    @GetMapping("/songList/likeTitle/detail")    public Object songListOfLikeTitle(HttpServletRequest req){        String title = req.getParameter("title").trim();        QueryWrapper<SongList> songListQueryWrapper=new QueryWrapper<>();        songListQueryWrapper.like("title",title);        return songListService.list(songListQueryWrapper);    }    //返回指定标题的歌单    @GetMapping("/songList/title/detail")    public Object songListOfTitle(HttpServletRequest req){        String title= req.getParameter("title").trim();        Map<String,Object> titles=new HashMap<>();        titles.put("title",title);        return songListService.listByMap(titles);    }    //返回指定类型的歌单    @GetMapping("/songList/style/detail")    public Object songOfType(HttpServletRequest req){        String style=req.getParameter("style").trim();        Map<String,Object> styles=new HashMap<>();        styles.put("style",style);        return songListService.listByMap(styles);    }    //删除歌单    @GetMapping("/songList/delete")    public Object deleteSongList(HttpServletRequest req){        String id=req.getParameter("id");        redisTemplate.delete("songL");        return songListService.removeById(Integer.parseInt(id));    }    //添加歌单    @PostMapping("/songList/add")    public Object addSongList(HttpServletRequest req){        JSONObject jsonObject=new JSONObject();        String title = req.getParameter("title").trim();        String pic = req.getParameter("pic").trim();        String introduction = req.getParameter("introduction").trim();        String style = req.getParameter("style").trim();        SongList songList = new SongList();        songList.setTitle(title);        songList.setPic(pic);        songList.setIntroduction(introduction);        songList.setStyle(style);        boolean res=songListService.save(songList);        if (res){            jsonObject.put("code", 1);            jsonObject.put("msg", "添加成功");            redisTemplate.delete("songL");        }else {            jsonObject.put("code", 0);            jsonObject.put("msg", "添加失败");        }        return jsonObject;    }    //更新歌单信息    @PostMapping("/songList/update")    public Object updateSongListMsg(HttpServletRequest req){        JSONObject jsonObject=new JSONObject();        String id = req.getParameter("id").trim();        String title = req.getParameter("title").trim();        String pic = req.getParameter("pic").trim();        String introduction = req.getParameter("introduction").trim();        String style = req.getParameter("style").trim();        SongList songList = new SongList();        songList.setId(Integer.parseInt(id));        songList.setTitle(title);        songList.setPic(pic);        songList.setIntroduction(introduction);        songList.setStyle(style);        boolean res=songListService.updateById(songList);        if (res){            jsonObject.put("code", 1);            jsonObject.put("msg", "修改成功");            redisTemplate.delete("songL");        }else {            jsonObject.put("code", 0);            jsonObject.put("msg", "修改失败");        }        return jsonObject;    }    //更新歌单图片    @PostMapping("/songList/img/update")    public Object updateSongListImg(@RequestParam("file")MultipartFile songlistfile,@RequestParam("id")int id){        JSONObject jsonObject=new JSONObject();        if(songlistfile.isEmpty()){            jsonObject.put("code", 0);            jsonObject.put("msg", "文件上传失败！");            return jsonObject;        }        //删除本地旧头像        QueryWrapper<SongList> oldOne=new QueryWrapper<>();        oldOne.select("pic").eq("id",id);        SongList deleteSongList=songListService.getOne(oldOne);        String deleteFilePath=System.getProperty("user.dir")+deleteSongList.getPic();        File deleteFile=new File(deleteFilePath);        if(deleteFile.exists()){            deleteFile.delete();        }        String fileName=System.currentTimeMillis()+songlistfile.getOriginalFilename();        String filePath=System.getProperty("user.dir")+"/img"+"/songListPic" ;        String storeAvatorPath="/img/songListPic/"+fileName;        File dest=new File(filePath+System.getProperty("file.separator") +fileName);        File file1=new File(filePath);        if(!file1.exists()){            file1.mkdir();        }        SongList songList=new SongList();        songList.setId(id);        songList.setPic(storeAvatorPath);        try {            songlistfile.transferTo(dest);            boolean res=songListService.updateById(songList);            if (res){                jsonObject.put("code", 1);                jsonObject.put("avator", storeAvatorPath);                jsonObject.put("msg", "上传成功");                redisTemplate.delete("songL");            }else {                jsonObject.put("code", 0);                jsonObject.put("msg", "上传失败");            }            return jsonObject;        } catch (IOException e) {            jsonObject.put("code", 0);            jsonObject.put("msg", "上传失败" + e.getMessage());            return jsonObject;        }finally {            return jsonObject;        }    }}